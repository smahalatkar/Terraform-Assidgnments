In this lesson, we will take the Jenkins image we built in the previous lesson, and deploy a Docker container using Terraform.

Edit main.tf:

vi main.tf
main.tf contents:

# Jenkins Volume
resource "docker_volume" "jenkins_volume" {
  name = "jenkins_data"
}

# Start the Jenkins Container
resource "docker_container" "jenkins_container" {
  name  = "jenkins"
  image = "jenkins:terraform"
  ports {
    internal = "8080"
    external = "8090"
  }

  volumes {
    volume_name    = "${docker_volume.jenkins_volume.name}"
    container_path = "/var/jenkins_home"
  }

  volumes {
    host_path      = "/var/run/docker.sock"
    container_path = "/var/run/docker.sock"
  }
}
Initialize Terraform:

terraform init

ubuntu@ip-172-31-14-134:~/jenkins$ terraform init

Initializing the backend...

Initializing provider plugins...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.docker: version = "~> 2.6"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.


ubuntu@ip-172-31-14-134:~/jenkins$ terraform validate
Success! The configuration is valid.


Plan the deployment:

terraform plan -out=tfplan
ubuntu@ip-172-31-14-134:~/jenkins$ terraform plan -out=tfplan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

docker_volume.jenkins_volume: Refreshing state... [id=jenkins_data]
docker_container.jenkins_container: Refreshing state... [id=61e9c5164d0a79f72ec2fc1cccb2b8f9303887e779e6bac5de0cbf20a04db360]

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.jenkins_container will be created
  + resource "docker_container" "jenkins_container" {
      + attach           = false
      + bridge           = (known after apply)
      + container_logs   = (known after apply)
      + exit_code        = (known after apply)
      + gateway          = (known after apply)
      + id               = (known after apply)
      + image            = "jenkins:terraform"
      + ip_address       = (known after apply)
      + ip_prefix_length = (known after apply)
      + log_driver       = "json-file"
      + logs             = false
      + must_run         = true
      + name             = "jenkins"
      + network_data     = (known after apply)
      + read_only        = false
      + restart          = "no"
      + rm               = false
      + start            = true

      + ports {
          + external = 8090
          + internal = 8080
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }

      + volumes {
          + container_path = "/var/jenkins_home"
          + volume_name    = "jenkins_data"
        }
      + volumes {
          + container_path = "/var/run/docker.sock"
          + host_path      = "/var/run/docker.sock"
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "tfplan"




Deploy Jenkins:

terraform apply tfplan
ubuntu@ip-172-31-14-134:~/jenkins$ terraform apply tfplan
docker_container.jenkins_container: Creating...
docker_container.jenkins_container: Creation complete after 1s [id=3c5acbe98e710620adfb95ac0c14cb2193a491032aeada9ea45c1a2d20f65c4d]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: terraform.tfstate

ubuntu@ip-172-31-14-134:~/jenkins$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES
3c5acbe98e71        jenkins:terraform   "/sbin/tini -- /usr/…"   3 minutes ago       Up 3 minutes        50000/tcp, 0.0.0.0:8090->8080/tcp   jenkins



Get the Admin password:

docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword
9f2dbec29476469398f510dcb9d86aa5


ubuntu@ip-172-31-14-134:~/jenkins$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES
3c5acbe98e71        jenkins:terraform   "/sbin/tini -- /usr/…"   3 minutes ago       Up 3 minutes        50000/tcp, 0.0.0.0:8090->8080/tcp   jenkins
ubuntu@ip-172-31-14-134:~/jenkins$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES
3c5acbe98e71        jenkins:terraform   "/sbin/tini -- /usr/…"   27 minutes ago      Up 27 minutes       50000/tcp, 0.0.0.0:8090->8080/tcp   jenkins
ubuntu@ip-172-31-14-134:~/jenkins$ docker container ls
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES
3c5acbe98e71        jenkins:terraform   "/sbin/tini -- /usr/…"   27 minutes ago      Up 27 minutes       50000/tcp, 0.0.0.0:8090->8080/tcp   jenkins
ubuntu@ip-172-31-14-134:~/jenkins$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
jenkins             terraform           8b436b3c8db6        2 hours ago         1.42GB
ghost               alpine              7a562dfa21a3        6 days ago          327MB
jenkins/jenkins     lts                 22b8b9a84dbe        2 weeks ago         568MB
